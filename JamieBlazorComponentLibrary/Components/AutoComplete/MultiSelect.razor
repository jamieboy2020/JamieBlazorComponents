@typeparam T

<div class="select-item-container">
    <div class="group">
        <input id="search" required="required" @bind-value="_searchString" autocomplete="off"
               @onfocus="ToggleDropDownHide" @onblur="ToggleDropDownHide" @bind-value:event="oninput" @onkeyup="@FilterItems" />
        <span class="highlight"></span><span class="bar"></span>
        <label for="search">Name</label>
    </div>

    <div class="dropdown @_dropdownHideCss" @ref="_dropdownElement">
        <ul>
            @foreach (var item in filtereredSelectedItems)
            {
                <li class="dropdown-item @(item.Selected ? " dropdown-item-selected":"")" @onmousedown="@(e=> SelectItem(item.Item))">@getValue(item.Item)</li>
            }

        </ul>
    </div>
</div>

@code{

    [Parameter]
    public IEnumerable<T> Items { get; set; }
    [Parameter]
    public Func<T, string> getValue { get; set; }
    [Parameter]
    public T Value { get; set; }
    [Parameter]
    public EventCallback<T> ValueChanged { get; set; }

    List<ListItem<T>> selectedItems = new List<ListItem<T>>();
    List<ListItem<T>> filtereredSelectedItems = new List<ListItem<T>>();
    string _searchString;
    string _dropdownHideCss = "dropdown-hide";
    ElementReference _dropdownElement;

    protected override async Task OnInitializedAsync()
    {

        selectedItems.AddRange(Items.Select(x => new ListItem<T> { Item = x, Selected = false }));
        filtereredSelectedItems = selectedItems;
    }

    public async Task FilterItems(KeyboardEventArgs args)
    {
        if (args.Key == "ArrowDown")

        {
            if (selectedItems.Any(x => x.Selected))
            {
                var selectedItem = selectedItems.First(x => x.Selected == true);

                if (selectedItems.IndexOf(selectedItem) != selectedItems.Count()-1)
                {
                    selectedItem.Selected = false;
                    selectedItems[selectedItems.IndexOf(selectedItem) + 1].Selected = true;
                }
            }
            else
            {
                selectedItems[0].Selected = true;
            }

        }
        if (args.Key == "ArrowUp")

        {
            if (selectedItems.Any(x => x.Selected))
            {
                var selectedItem = selectedItems.First(x => x.Selected == true);

                if (selectedItems.IndexOf(selectedItem) != 0)
                {
                    selectedItem.Selected = false;
                    selectedItems[selectedItems.IndexOf(selectedItem) - 1].Selected = true;
                }
            }
            else
            {
                selectedItems[0].Selected = true;
            }

        }

        if(args.Key == "Enter")
        {
            await SelectItem(selectedItems.First(x => x.Selected == true).Item);
            await ToggleDropDownHide();
        }

        if (_searchString != null)
        {
            filtereredSelectedItems = selectedItems.Where(x => getValue(x.Item).ToLower().Contains(_searchString.ToLower())).ToList();

        }
    }

    public async Task ToggleDropDownHide()
    {
        _dropdownHideCss = _dropdownHideCss == string.Empty ? "dropdown-hide" : string.Empty;
    }

    public async Task SelectItem(T selectedItem)
    {
        _searchString = getValue(selectedItem);
        Value = selectedItem;
        filtereredSelectedItems.ForEach(x => x.Selected = false);
        filtereredSelectedItems.First(x => x.Item.Equals(selectedItem)).Selected = true;
        await ValueChanged.InvokeAsync(Value);
    }

}